"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FirefoxChannel = void 0;
exports.resolveDownloadUrl = resolveDownloadUrl;
exports.resolveDownloadPath = resolveDownloadPath;
exports.relativeExecutablePath = relativeExecutablePath;
exports.resolveBuildId = resolveBuildId;
exports.createProfile = createProfile;
exports.compareVersions = compareVersions;
const node_fs_1 = __importDefault(require("node:fs"));
const node_path_1 = __importDefault(require("node:path"));
const httpUtil_js_1 = require("../httpUtil.js");
const types_js_1 = require("./types.js");
function getFormat(buildId) {
    const majorVersion = Number(buildId.split('.').shift());
    return majorVersion >= 135 ? 'xz' : 'bz2';
}
function archiveNightly(platform, buildId) {
    switch (platform) {
        case types_js_1.BrowserPlatform.LINUX:
            return `firefox-${buildId}.en-US.linux-x86_64.tar.${getFormat(buildId)}`;
        case types_js_1.BrowserPlatform.LINUX_ARM:
            return `firefox-${buildId}.en-US.linux-aarch64.tar.${getFormat(buildId)}`;
        case types_js_1.BrowserPlatform.MAC_ARM:
        case types_js_1.BrowserPlatform.MAC:
            return `firefox-${buildId}.en-US.mac.dmg`;
        case types_js_1.BrowserPlatform.WIN32:
        case types_js_1.BrowserPlatform.WIN64:
            return `firefox-${buildId}.en-US.${platform}.zip`;
    }
}
function archive(platform, buildId) {
    switch (platform) {
        case types_js_1.BrowserPlatform.LINUX_ARM:
        case types_js_1.BrowserPlatform.LINUX:
            return `firefox-${buildId}.tar.${getFormat(buildId)}`;
        case types_js_1.BrowserPlatform.MAC_ARM:
        case types_js_1.BrowserPlatform.MAC:
            return `Firefox ${buildId}.dmg`;
        case types_js_1.BrowserPlatform.WIN32:
        case types_js_1.BrowserPlatform.WIN64:
            return `Firefox Setup ${buildId}.exe`;
    }
}
function platformName(platform) {
    switch (platform) {
        case types_js_1.BrowserPlatform.LINUX:
            return `linux-x86_64`;
        case types_js_1.BrowserPlatform.LINUX_ARM:
            return `linux-aarch64`;
        case types_js_1.BrowserPlatform.MAC_ARM:
        case types_js_1.BrowserPlatform.MAC:
            return `mac`;
        case types_js_1.BrowserPlatform.WIN32:
        case types_js_1.BrowserPlatform.WIN64:
            return platform;
    }
}
function parseBuildId(buildId) {
    for (const value of Object.values(FirefoxChannel)) {
        if (buildId.startsWith(value + '_')) {
            buildId = buildId.substring(value.length + 1);
            return [value, buildId];
        }
    }
    
    return [FirefoxChannel.NIGHTLY, buildId];
}
function resolveDownloadUrl(platform, buildId, baseUrl) {
    const [channel] = parseBuildId(buildId);
    switch (channel) {
        case FirefoxChannel.NIGHTLY:
            baseUrl ??=
                'https:
            break;
        case FirefoxChannel.DEVEDITION:
            baseUrl ??= 'https:
            break;
        case FirefoxChannel.BETA:
        case FirefoxChannel.STABLE:
        case FirefoxChannel.ESR:
            baseUrl ??= 'https:
            break;
    }
    return `${baseUrl}/${resolveDownloadPath(platform, buildId).join('/')}`;
}
function resolveDownloadPath(platform, buildId) {
    const [channel, resolvedBuildId] = parseBuildId(buildId);
    switch (channel) {
        case FirefoxChannel.NIGHTLY:
            return [archiveNightly(platform, resolvedBuildId)];
        case FirefoxChannel.DEVEDITION:
        case FirefoxChannel.BETA:
        case FirefoxChannel.STABLE:
        case FirefoxChannel.ESR:
            return [
                resolvedBuildId,
                platformName(platform),
                'en-US',
                archive(platform, resolvedBuildId),
            ];
    }
}
function relativeExecutablePath(platform, buildId) {
    const [channel] = parseBuildId(buildId);
    switch (channel) {
        case FirefoxChannel.NIGHTLY:
            switch (platform) {
                case types_js_1.BrowserPlatform.MAC_ARM:
                case types_js_1.BrowserPlatform.MAC:
                    return node_path_1.default.join('Firefox Nightly.app', 'Contents', 'MacOS', 'firefox');
                case types_js_1.BrowserPlatform.LINUX_ARM:
                case types_js_1.BrowserPlatform.LINUX:
                    return node_path_1.default.join('firefox', 'firefox');
                case types_js_1.BrowserPlatform.WIN32:
                case types_js_1.BrowserPlatform.WIN64:
                    return node_path_1.default.join('firefox', 'firefox.exe');
            }
        case FirefoxChannel.BETA:
        case FirefoxChannel.DEVEDITION:
        case FirefoxChannel.ESR:
        case FirefoxChannel.STABLE:
            switch (platform) {
                case types_js_1.BrowserPlatform.MAC_ARM:
                case types_js_1.BrowserPlatform.MAC:
                    return node_path_1.default.join('Firefox.app', 'Contents', 'MacOS', 'firefox');
                case types_js_1.BrowserPlatform.LINUX_ARM:
                case types_js_1.BrowserPlatform.LINUX:
                    return node_path_1.default.join('firefox', 'firefox');
                case types_js_1.BrowserPlatform.WIN32:
                case types_js_1.BrowserPlatform.WIN64:
                    return node_path_1.default.join('core', 'firefox.exe');
            }
    }
}
var FirefoxChannel;
(function (FirefoxChannel) {
    FirefoxChannel["STABLE"] = "stable";
    FirefoxChannel["ESR"] = "esr";
    FirefoxChannel["DEVEDITION"] = "devedition";
    FirefoxChannel["BETA"] = "beta";
    FirefoxChannel["NIGHTLY"] = "nightly";
})(FirefoxChannel || (exports.FirefoxChannel = FirefoxChannel = {}));
async function resolveBuildId(channel = FirefoxChannel.NIGHTLY) {
    const channelToVersionKey = {
        [FirefoxChannel.ESR]: 'FIREFOX_ESR',
        [FirefoxChannel.STABLE]: 'LATEST_FIREFOX_VERSION',
        [FirefoxChannel.DEVEDITION]: 'FIREFOX_DEVEDITION',
        [FirefoxChannel.BETA]: 'FIREFOX_DEVEDITION',
        [FirefoxChannel.NIGHTLY]: 'FIREFOX_NIGHTLY',
    };
    const versions = (await (0, httpUtil_js_1.getJSON)(new URL('https:
    const version = versions[channelToVersionKey[channel]];
    if (!version) {
        throw new Error(`Channel ${channel} is not found.`);
    }
    return channel + '_' + version;
}
async function createProfile(options) {
    if (!node_fs_1.default.existsSync(options.path)) {
        await node_fs_1.default.promises.mkdir(options.path, {
            recursive: true,
        });
    }
    await syncPreferences({
        preferences: {
            ...defaultProfilePreferences(options.preferences),
            ...options.preferences,
        },
        path: options.path,
    });
}
function defaultProfilePreferences(extraPrefs) {
    const server = 'dummy.test';
    const defaultPrefs = {
        
        'app.normandy.api_url': '',
        
        'app.update.checkInstallTime': false,
        
        'app.update.disabledForTesting': true,
        
        'apz.content_response_timeout': 60000,
        
        
        'browser.contentblocking.features.standard': '-tp,tpPrivate,cookieBehavior0,-cm,-fp',
        
        
        
        'browser.dom.window.dump.enabled': true,
        
        'browser.newtabpage.activity-stream.feeds.system.topstories': false,
        
        'browser.newtabpage.enabled': false,
        
        
        'browser.pagethumbnails.capturing_disabled': true,
        
        'browser.safebrowsing.blockedURIs.enabled': false,
        'browser.safebrowsing.downloads.enabled': false,
        'browser.safebrowsing.malware.enabled': false,
        'browser.safebrowsing.phishing.enabled': false,
        
        'browser.search.update': false,
        
        'browser.sessionstore.resume_from_crash': false,
        
        'browser.shell.checkDefaultBrowser': false,
        
        'browser.startup.homepage': 'about:blank',
        
        'browser.startup.homepage_override.mstone': 'ignore',
        
        'browser.startup.page': 0,
        
        
        
        'browser.tabs.disableBackgroundZombification': false,
        
        'browser.tabs.warnOnCloseOtherTabs': false,
        
        'browser.tabs.warnOnOpen': false,
        
        'browser.translations.automaticallyPopup': false,
        
        'browser.uitour.enabled': false,
        
        
        'browser.urlbar.suggest.searches': false,
        
        'browser.usedOnWindows10.introURL': '',
        
        'browser.warnOnQuit': false,
        
        'datareporting.healthreport.documentServerURI': `http:
        'datareporting.healthreport.logging.consoleEnabled': false,
        'datareporting.healthreport.service.enabled': false,
        'datareporting.healthreport.service.firstRun': false,
        'datareporting.healthreport.uploadEnabled': false,
        
        'datareporting.policy.dataSubmissionEnabled': false,
        'datareporting.policy.dataSubmissionPolicyBypassNotification': true,
        
        
        'devtools.jsonview.enabled': false,
        
        'dom.disable_open_during_load': false,
        
        
        'dom.file.createInChild': true,
        
        'dom.ipc.reportProcessHangs': false,
        
        'dom.max_chrome_script_run_time': 0,
        'dom.max_script_run_time': 0,
        
        
        'extensions.autoDisableScopes': 0,
        'extensions.enabledScopes': 5,
        
        'extensions.getAddons.cache.enabled': false,
        
        'extensions.installDistroAddons': false,
        
        'extensions.screenshots.disabled': true,
        
        'extensions.update.enabled': false,
        
        'extensions.update.notifyUser': false,
        
        'extensions.webservice.discoverURL': `http:
        
        'focusmanager.testmode': true,
        
        'general.useragent.updates.enabled': false,
        
        
        'geo.provider.testing': true,
        
        'geo.wifi.scan': false,
        
        'hangmonitor.timeout': 0,
        
        'javascript.options.showInConsole': true,
        
        'media.gmp-manager.updateEnabled': false,
        
        'media.sanity-test.disabled': true,
        
        'network.cookie.sameSite.laxByDefault': false,
        
        'network.http.prompt-temp-redirect': false,
        
        
        'network.http.speculative-parallel-limit': 0,
        
        'network.manage-offline-status': false,
        
        'network.sntp.pools': server,
        
        'plugin.state.flash': 0,
        'privacy.trackingprotection.enabled': false,
        
        
        'remote.enabled': true,
        
        'security.certerrors.mitm.priming.enabled': false,
        
        
        'security.fileuri.strict_origin_policy': false,
        
        'security.notification_enable_delay': 0,
        
        'services.settings.server': `http:
        
        
        'signon.autofillForms': false,
        
        
        'signon.rememberSignons': false,
        
        'startup.homepage_welcome_url': 'about:blank',
        
        'startup.homepage_welcome_url.additional': '',
        
        'toolkit.cosmeticAnimations.enabled': false,
        
        'toolkit.startup.max_resumed_crashes': -1,
    };
    return Object.assign(defaultPrefs, extraPrefs);
}
async function backupFile(input) {
    if (!node_fs_1.default.existsSync(input)) {
        return;
    }
    await node_fs_1.default.promises.copyFile(input, input + '.puppeteer');
}
async function syncPreferences(options) {
    const prefsPath = node_path_1.default.join(options.path, 'prefs.js');
    const userPath = node_path_1.default.join(options.path, 'user.js');
    const lines = Object.entries(options.preferences).map(([key, value]) => {
        return `user_pref(${JSON.stringify(key)}, ${JSON.stringify(value)});`;
    });
    
    const result = await Promise.allSettled([
        backupFile(userPath).then(async () => {
            await node_fs_1.default.promises.writeFile(userPath, lines.join('\n'));
        }),
        backupFile(prefsPath),
    ]);
    for (const command of result) {
        if (command.status === 'rejected') {
            throw command.reason;
        }
    }
}
function compareVersions(a, b) {
    
    return parseInt(a.replace('.', ''), 16) - parseInt(b.replace('.', ''), 16);
}
