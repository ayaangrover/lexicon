
'use strict';

const SchemaObjectIdOptions = require('../options/schemaObjectIdOptions');
const SchemaType = require('../schemaType');
const castObjectId = require('../cast/objectid');
const createJSONSchemaTypeDefinition = require('../helpers/createJSONSchemaTypeDefinition');
const getConstructorName = require('../helpers/getConstructorName');
const oid = require('../types/objectid');
const isBsonType = require('../helpers/isBsonType');
const utils = require('../utils');

const CastError = SchemaType.CastError;
let Document;


function SchemaObjectId(key, options) {
  const isKeyHexStr = typeof key === 'string' && key.length === 24 && /^[a-f0-9]+$/i.test(key);
  const suppressWarning = options && options.suppressWarning;
  if ((isKeyHexStr || typeof key === 'undefined') && !suppressWarning) {
    utils.warn('mongoose: To create a new ObjectId please try ' +
      '`Mongoose.Types.ObjectId` instead of using ' +
      '`Mongoose.Schema.ObjectId`. Set the `suppressWarning` option if ' +
      'you\'re trying to create a hex char path in your schema.');
  }
  SchemaType.call(this, key, options, 'ObjectId');
}

SchemaObjectId.schemaName = 'ObjectId';

SchemaObjectId.defaultOptions = {};

SchemaObjectId.prototype = Object.create(SchemaType.prototype);
SchemaObjectId.prototype.constructor = SchemaObjectId;
SchemaObjectId.prototype.OptionsConstructor = SchemaObjectIdOptions;


SchemaObjectId.get = SchemaType.get;


SchemaObjectId.set = SchemaType.set;

SchemaObjectId.setters = [];


SchemaObjectId.prototype.auto = function(turnOn) {
  if (turnOn) {
    this.default(defaultId);
    this.set(resetId);
  }

  return this;
};


SchemaObjectId._checkRequired = v => isBsonType(v, 'ObjectId');


SchemaObjectId._cast = castObjectId;


SchemaObjectId.cast = function cast(caster) {
  if (arguments.length === 0) {
    return this._cast;
  }
  if (caster === false) {
    caster = this._defaultCaster;
  }
  this._cast = caster;

  return this._cast;
};


SchemaObjectId._defaultCaster = v => {
  if (!(isBsonType(v, 'ObjectId'))) {
    throw new Error(v + ' is not an instance of ObjectId');
  }
  return v;
};


SchemaObjectId.checkRequired = SchemaType.checkRequired;


SchemaObjectId.prototype.checkRequired = function checkRequired(value, doc) {
  if (SchemaType._isRef(this, value, doc, true)) {
    return !!value;
  }

  
  
  const _checkRequired = typeof this.constructor.checkRequired === 'function' ?
    this.constructor.checkRequired() :
    SchemaObjectId.checkRequired();

  return _checkRequired(value);
};


SchemaObjectId.prototype.cast = function(value, doc, init, prev, options) {
  if (!(isBsonType(value, 'ObjectId')) && SchemaType._isRef(this, value, doc, init)) {
    
    if ((getConstructorName(value) || '').toLowerCase() === 'objectid') {
      return new oid(value.toHexString());
    }

    if (value == null || utils.isNonBuiltinObject(value)) {
      return this._castRef(value, doc, init, options);
    }
  }

  let castObjectId;
  if (typeof this._castFunction === 'function') {
    castObjectId = this._castFunction;
  } else if (typeof this.constructor.cast === 'function') {
    castObjectId = this.constructor.cast();
  } else {
    castObjectId = SchemaObjectId.cast();
  }

  try {
    return castObjectId(value);
  } catch (error) {
    throw new CastError('ObjectId', value, this.path, error, this);
  }
};


function handleSingle(val) {
  return this.cast(val);
}

SchemaObjectId.prototype.$conditionalHandlers = {
  ...SchemaType.prototype.$conditionalHandlers,
  $gt: handleSingle,
  $gte: handleSingle,
  $lt: handleSingle,
  $lte: handleSingle
};


function defaultId() {
  return new oid();
}

defaultId.$runBeforeSetters = true;

function resetId(v) {
  Document || (Document = require('../document'));

  if (this instanceof Document) {
    if (v === void 0) {
      const _v = new oid();
      return _v;
    }
  }

  return v;
}


SchemaObjectId.prototype.toJSONSchema = function toJSONSchema(options) {
  const isRequired = (this.options.required && typeof this.options.required !== 'function') || this.path === '_id';
  return createJSONSchemaTypeDefinition('string', 'objectId', options?.useBsonType, isRequired);
};


module.exports = SchemaObjectId;
