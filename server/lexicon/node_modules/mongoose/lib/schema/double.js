'use strict';


const CastError = require('../error/cast');
const SchemaType = require('../schemaType');
const castDouble = require('../cast/double');
const createJSONSchemaTypeDefinition = require('../helpers/createJSONSchemaTypeDefinition');


function SchemaDouble(path, options) {
  SchemaType.call(this, path, options, 'Double');
}

SchemaDouble.schemaName = 'Double';

SchemaDouble.defaultOptions = {};

SchemaDouble.prototype = Object.create(SchemaType.prototype);
SchemaDouble.prototype.constructor = SchemaDouble;


SchemaDouble._cast = castDouble;


SchemaDouble.set = SchemaType.set;

SchemaDouble.setters = [];


SchemaDouble.get = SchemaType.get;


SchemaDouble._defaultCaster = v => {
  if (v != null) {
    if (v._bsontype !== 'Double') {
      throw new Error();
    }
  }

  return v;
};


SchemaDouble.cast = function cast(caster) {
  if (arguments.length === 0) {
    return this._cast;
  }
  if (caster === false) {
    caster = this._defaultCaster;
  }

  this._cast = caster;

  return this._cast;
};



SchemaDouble._checkRequired = v => v != null;

SchemaDouble.checkRequired = SchemaType.checkRequired;


SchemaDouble.prototype.checkRequired = function(value) {
  return this.constructor._checkRequired(value);
};


SchemaDouble.prototype.cast = function(value) {
  let castDouble;
  if (typeof this._castFunction === 'function') {
    castDouble = this._castFunction;
  } else if (typeof this.constructor.cast === 'function') {
    castDouble = this.constructor.cast();
  } else {
    castDouble = SchemaDouble.cast();
  }

  try {
    return castDouble(value);
  } catch (error) {
    throw new CastError('Double', value, this.path, error, this);
  }
};


function handleSingle(val) {
  return this.cast(val);
}

SchemaDouble.prototype.$conditionalHandlers = {
  ...SchemaType.prototype.$conditionalHandlers,
  $gt: handleSingle,
  $gte: handleSingle,
  $lt: handleSingle,
  $lte: handleSingle
};


SchemaDouble.prototype.toJSONSchema = function toJSONSchema(options) {
  const isRequired = this.options.required && typeof this.options.required !== 'function';
  return createJSONSchemaTypeDefinition('number', 'double', options?.useBsonType, isRequired);
};


module.exports = SchemaDouble;
