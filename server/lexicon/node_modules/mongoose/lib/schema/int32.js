'use strict';


const CastError = require('../error/cast');
const SchemaType = require('../schemaType');
const castInt32 = require('../cast/int32');
const createJSONSchemaTypeDefinition = require('../helpers/createJSONSchemaTypeDefinition');
const handleBitwiseOperator = require('./operators/bitwise');


function SchemaInt32(path, options) {
  SchemaType.call(this, path, options, 'Int32');
}

SchemaInt32.schemaName = 'Int32';

SchemaInt32.defaultOptions = {};

SchemaInt32.prototype = Object.create(SchemaType.prototype);
SchemaInt32.prototype.constructor = SchemaInt32;


SchemaInt32._cast = castInt32;


SchemaInt32.set = SchemaType.set;

SchemaInt32.setters = [];


SchemaInt32.get = SchemaType.get;


SchemaInt32._defaultCaster = v => {
  const INT32_MAX = 0x7FFFFFFF;
  const INT32_MIN = -0x80000000;

  if (v != null) {
    if (typeof v !== 'number' || v !== (v | 0) || v < INT32_MIN || v > INT32_MAX) {
      throw new Error();
    }
  }

  return v;
};


SchemaInt32.cast = function cast(caster) {
  if (arguments.length === 0) {
    return this._cast;
  }
  if (caster === false) {
    caster = this._defaultCaster;
  }

  this._cast = caster;

  return this._cast;
};



SchemaInt32._checkRequired = v => v != null;

SchemaInt32.checkRequired = SchemaType.checkRequired;


SchemaInt32.prototype.checkRequired = function(value) {
  return this.constructor._checkRequired(value);
};


SchemaInt32.prototype.cast = function(value) {
  let castInt32;
  if (typeof this._castFunction === 'function') {
    castInt32 = this._castFunction;
  } else if (typeof this.constructor.cast === 'function') {
    castInt32 = this.constructor.cast();
  } else {
    castInt32 = SchemaInt32.cast();
  }

  try {
    return castInt32(value);
  } catch (error) {
    throw new CastError('Int32', value, this.path, error, this);
  }
};


SchemaInt32.$conditionalHandlers = {
  ...SchemaType.prototype.$conditionalHandlers,
  $gt: handleSingle,
  $gte: handleSingle,
  $lt: handleSingle,
  $lte: handleSingle,
  $bitsAllClear: handleBitwiseOperator,
  $bitsAnyClear: handleBitwiseOperator,
  $bitsAllSet: handleBitwiseOperator,
  $bitsAnySet: handleBitwiseOperator
};


function handleSingle(val, context) {
  return this.castForQuery(null, val, context);
}


SchemaInt32.prototype.castForQuery = function($conditional, val, context) {
  let handler;
  if ($conditional != null) {
    handler = SchemaInt32.$conditionalHandlers[$conditional];

    if (handler) {
      return handler.call(this, val);
    }

    return this.applySetters(val, context);
  }

  try {
    return this.applySetters(val, context);
  } catch (err) {
    if (err instanceof CastError && err.path === this.path && this.$fullPath != null) {
      err.path = this.$fullPath;
    }
    throw err;
  }
};


SchemaInt32.prototype.toJSONSchema = function toJSONSchema(options) {
  const isRequired = this.options.required && typeof this.options.required !== 'function';
  return createJSONSchemaTypeDefinition('number', 'int', options?.useBsonType, isRequired);
};



module.exports = SchemaInt32;
