
'use strict';

const SchemaType = require('../schemaType');
const symbols = require('./symbols');
const isObject = require('../helpers/isObject');
const utils = require('../utils');


function SchemaMixed(path, options) {
  if (options && options.default) {
    const def = options.default;
    if (Array.isArray(def) && def.length === 0) {
      
      options.default = Array;
    } else if (!options.shared && isObject(def) && Object.keys(def).length === 0) {
      
      options.default = function() {
        return {};
      };
    }
  }

  SchemaType.call(this, path, options, 'Mixed');

  this[symbols.schemaMixedSymbol] = true;
}

SchemaMixed.schemaName = 'Mixed';

SchemaMixed.defaultOptions = {};

SchemaMixed.prototype = Object.create(SchemaType.prototype);
SchemaMixed.prototype.constructor = SchemaMixed;


SchemaMixed.get = SchemaType.get;


SchemaMixed.set = SchemaType.set;

SchemaMixed.setters = [];


SchemaMixed.prototype.cast = function(val) {
  if (val instanceof Error) {
    return utils.errorToPOJO(val);
  }
  return val;
};


SchemaMixed.prototype.castForQuery = function($cond, val) {
  return val;
};


module.exports = SchemaMixed;
