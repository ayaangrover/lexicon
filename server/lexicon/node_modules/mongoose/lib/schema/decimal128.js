
'use strict';

const SchemaType = require('../schemaType');
const CastError = SchemaType.CastError;
const castDecimal128 = require('../cast/decimal128');
const createJSONSchemaTypeDefinition = require('../helpers/createJSONSchemaTypeDefinition');
const isBsonType = require('../helpers/isBsonType');


function SchemaDecimal128(key, options) {
  SchemaType.call(this, key, options, 'Decimal128');
}

SchemaDecimal128.schemaName = 'Decimal128';

SchemaDecimal128.defaultOptions = {};

SchemaDecimal128.prototype = Object.create(SchemaType.prototype);
SchemaDecimal128.prototype.constructor = SchemaDecimal128;


SchemaDecimal128._cast = castDecimal128;


SchemaDecimal128.set = SchemaType.set;

SchemaDecimal128.setters = [];


SchemaDecimal128.get = SchemaType.get;


SchemaDecimal128.cast = function cast(caster) {
  if (arguments.length === 0) {
    return this._cast;
  }
  if (caster === false) {
    caster = this._defaultCaster;
  }
  this._cast = caster;

  return this._cast;
};


SchemaDecimal128._defaultCaster = v => {
  if (v != null && !isBsonType(v, 'Decimal128')) {
    throw new Error();
  }
  return v;
};


SchemaDecimal128._checkRequired = v => isBsonType(v, 'Decimal128');


SchemaDecimal128.checkRequired = SchemaType.checkRequired;


SchemaDecimal128.prototype.checkRequired = function checkRequired(value, doc) {
  if (SchemaType._isRef(this, value, doc, true)) {
    return !!value;
  }

  
  
  const _checkRequired = typeof this.constructor.checkRequired === 'function' ?
    this.constructor.checkRequired() :
    SchemaDecimal128.checkRequired();

  return _checkRequired(value);
};


SchemaDecimal128.prototype.cast = function(value, doc, init, prev, options) {
  if (SchemaType._isRef(this, value, doc, init)) {
    if (isBsonType(value, 'Decimal128')) {
      return value;
    }

    return this._castRef(value, doc, init, options);
  }

  let castDecimal128;
  if (typeof this._castFunction === 'function') {
    castDecimal128 = this._castFunction;
  } else if (typeof this.constructor.cast === 'function') {
    castDecimal128 = this.constructor.cast();
  } else {
    castDecimal128 = SchemaDecimal128.cast();
  }

  try {
    return castDecimal128(value);
  } catch (error) {
    throw new CastError('Decimal128', value, this.path, error, this);
  }
};


function handleSingle(val) {
  return this.cast(val);
}

SchemaDecimal128.prototype.$conditionalHandlers = {
  ...SchemaType.prototype.$conditionalHandlers,
  $gt: handleSingle,
  $gte: handleSingle,
  $lt: handleSingle,
  $lte: handleSingle
};


SchemaDecimal128.prototype.toJSONSchema = function toJSONSchema(options) {
  const isRequired = this.options.required && typeof this.options.required !== 'function';
  return createJSONSchemaTypeDefinition('string', 'decimal', options?.useBsonType, isRequired);
};


module.exports = SchemaDecimal128;
