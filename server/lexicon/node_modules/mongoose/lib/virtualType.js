'use strict';

const modelNamesFromRefPath = require('./helpers/populate/modelNamesFromRefPath');
const utils = require('./utils');

const modelSymbol = require('./helpers/symbols').modelSymbol;


function VirtualType(options, name) {
  this.path = name;
  this.getters = [];
  this.setters = [];
  this.options = Object.assign({}, options);
}


VirtualType.prototype._applyDefaultGetters = function() {
  if (this.getters.length > 0 || this.setters.length > 0) {
    return;
  }

  const path = this.path;
  const internalProperty = '$' + path;
  this.getters.push(function() {
    return this.$locals[internalProperty];
  });
  this.setters.push(function(v) {
    this.$locals[internalProperty] = v;
  });
};


VirtualType.prototype.clone = function() {
  const clone = new VirtualType(this.options, this.path);
  clone.getters = [].concat(this.getters);
  clone.setters = [].concat(this.setters);
  return clone;
};


VirtualType.prototype.get = function(fn) {
  this.getters.push(fn);
  return this;
};


VirtualType.prototype.set = function(fn) {
  this.setters.push(fn);
  return this;
};


VirtualType.prototype.applyGetters = function(value, doc) {
  if (utils.hasUserDefinedProperty(this.options, ['ref', 'refPath']) &&
      doc.$$populatedVirtuals &&
      doc.$$populatedVirtuals.hasOwnProperty(this.path)) {
    value = doc.$$populatedVirtuals[this.path];
  }

  let v = value;
  for (const getter of this.getters) {
    v = getter.call(doc, v, this, doc);
  }
  return v;
};


VirtualType.prototype.applySetters = function(value, doc) {
  let v = value;
  for (const setter of this.setters) {
    v = setter.call(doc, v, this, doc);
  }
  return v;
};


VirtualType.prototype._getModelNamesForPopulate = function _getModelNamesForPopulate(doc) {
  if (this.options.refPath) {
    return modelNamesFromRefPath(this.options.refPath, doc, this.path);
  }

  let normalizedRef = null;
  if (typeof this.options.ref === 'function' && !this.options.ref[modelSymbol]) {
    normalizedRef = this.options.ref.call(doc, doc);
  } else {
    normalizedRef = this.options.ref;
  }
  if (normalizedRef != null && !Array.isArray(normalizedRef)) {
    return [normalizedRef];
  }

  return normalizedRef;
};


module.exports = VirtualType;
