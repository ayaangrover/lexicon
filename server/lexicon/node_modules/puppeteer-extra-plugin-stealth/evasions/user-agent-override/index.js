'use strict'

const { PuppeteerExtraPlugin } = require('puppeteer-extra-plugin')

class Plugin extends PuppeteerExtraPlugin {
  constructor(opts = {}) {
    super(opts)

    this._headless = false
  }

  get name() {
    return 'stealth/evasions/user-agent-override'
  }

  get dependencies() {
    return new Set(['user-preferences'])
  }

  get defaults() {
    return {
      userAgent: null,
      locale: 'en-US,en',
      maskLinux: true
    }
  }

  async onPageCreated(page) {
    
    let ua =
      this.opts.userAgent ||
      (await page.browser().userAgent()).replace('HeadlessChrome/', 'Chrome/')

    if (
      this.opts.maskLinux &&
      ua.includes('Linux') &&
      !ua.includes('Android') 
    ) {
      ua = ua.replace(/\(([^)]+)\)/, '(Windows NT 10.0; Win64; x64)') 
    }

    
    const uaVersion = ua.includes('Chrome/')
      ? ua.match(/Chrome\/([\d|.]+)/)[1]
      : (await page.browser().version()).match(/\/([\d|.]+)/)[1]

    
    const _getPlatform = (extended = false) => {
      if (ua.includes('Mac OS X')) {
        return extended ? 'Mac OS X' : 'MacIntel'
      } else if (ua.includes('Android')) {
        return 'Android'
      } else if (ua.includes('Linux')) {
        return 'Linux'
      } else {
        return extended ? 'Windows' : 'Win32'
      }
    }

    
    const _getBrands = () => {
      const seed = uaVersion.split('.')[0] 

      const order = [
        [0, 1, 2],
        [0, 2, 1],
        [1, 0, 2],
        [1, 2, 0],
        [2, 0, 1],
        [2, 1, 0]
      ][seed % 6]
      const escapedChars = [' ', ' ', ';']

      const greaseyBrand = `${escapedChars[order[0]]}Not${
        escapedChars[order[1]]
      }A${escapedChars[order[2]]}Brand`

      const greasedBrandVersionList = []
      greasedBrandVersionList[order[0]] = {
        brand: greaseyBrand,
        version: '99'
      }
      greasedBrandVersionList[order[1]] = {
        brand: 'Chromium',
        version: seed
      }
      greasedBrandVersionList[order[2]] = {
        brand: 'Google Chrome',
        version: seed
      }

      return greasedBrandVersionList
    }

    
    const _getPlatformVersion = () => {
      if (ua.includes('Mac OS X ')) {
        return ua.match(/Mac OS X ([^)]+)/)[1]
      } else if (ua.includes('Android ')) {
        return ua.match(/Android ([^;]+)/)[1]
      } else if (ua.includes('Windows ')) {
        return ua.match(/Windows .*?([\d|.]+);?/)[1]
      } else {
        return ''
      }
    }

    
    const _getPlatformArch = () => (_getMobile() ? '' : 'x86')

    
    const _getPlatformModel = () =>
      _getMobile() ? ua.match(/Android.*?;\s([^)]+)/)[1] : ''

    const _getMobile = () => ua.includes('Android')

    const override = {
      userAgent: ua,
      platform: _getPlatform(),
      userAgentMetadata: {
        brands: _getBrands(),
        fullVersion: uaVersion,
        platform: _getPlatform(true),
        platformVersion: _getPlatformVersion(),
        architecture: _getPlatformArch(),
        model: _getPlatformModel(),
        mobile: _getMobile()
      }
    }

    
    
    
    if (this._headless) {
      override.acceptLanguage = this.opts.locale || 'en-US,en'
    }

    this.debug('onPageCreated - Will set these user agent options', {
      override,
      opts: this.opts
    })

    const client =
      typeof page._client === 'function' ? page._client() : page._client
    client.send('Network.setUserAgentOverride', override)
  }

  async beforeLaunch(options) {
    
    this._headless = options.headless
  }

  async beforeConnect() {
    
    this._headless = true
  }

  get data() {
    return [
      {
        name: 'userPreferences',
        value: {
          intl: { accept_languages: this.opts.locale || 'en-US,en' }
        }
      }
    ]
  }
}

const defaultExport = opts => new Plugin(opts)
module.exports = defaultExport
