'use strict'

const { PuppeteerExtraPlugin } = require('puppeteer-extra-plugin')

class Plugin extends PuppeteerExtraPlugin {
  constructor(opts = {}) {
    super(opts)
  }

  get name() {
    return 'stealth/evasions/sourceurl'
  }

  async onPageCreated(page) {
    const client =
      page && typeof page._client === 'function' ? page._client() : page._client
    if (!client) {
      this.debug('Warning, missing properties to intercept CDP.', { page })
      return
    }

    
    
    const debug = this.debug
    client.send = (function(originalMethod, context) {
      return async function() {
        const [method, paramArgs] = arguments || []
        const next = async () => {
          try {
            return await originalMethod.apply(context, [method, paramArgs])
          } catch (error) {
            
            if (
              error instanceof Error &&
              error.message.includes(
                `Protocol error (Network.getResponseBody): No resource with given identifier found`
              )
            ) {
              debug(
                `Caught and ignored an error about a missing network resource.`,
                { error }
              )
            } else {
              throw error
            }
          }
        }

        if (!method || !paramArgs) {
          return next()
        }

        
        
        const methodsToPatch = {
          'Runtime.evaluate': 'expression',
          'Runtime.callFunctionOn': 'functionDeclaration'
        }
        const SOURCE_URL_SUFFIX =
          '

        if (!methodsToPatch[method] || !paramArgs[methodsToPatch[method]]) {
          return next()
        }

        debug('Stripping sourceURL', { method })
        paramArgs[methodsToPatch[method]] = paramArgs[
          methodsToPatch[method]
        ].replace(SOURCE_URL_SUFFIX, '')

        return next()
      }
    })(client.send, client)
  }
}

module.exports = function(pluginConfig) {
  return new Plugin(pluginConfig)
}
