const test = require('ava')

const { vanillaPuppeteer, addExtra, compareLooseVersionStrings } = require('./util')
const Plugin = require('..')


const isOldPuppeteerVersion = () => {
  const version = process.env.PUPPETEER_VERSION
  const isOld = version && (version === '1.9.0' || version === '1.6.2')
  return isOld
}

test('stealth: will pass Paul Irish', async t => {
  const browser = await addExtra(vanillaPuppeteer)
    .use(Plugin())
    .launch({ headless: true })
  const page = await browser.newPage()
  await page.exposeFunction('compareLooseVersionStrings', compareLooseVersionStrings)
  const detectionResults = await page.evaluate(detectHeadless)
  await browser.close()

  if (isOldPuppeteerVersion()) {
    t.true(true)
    return
  }

  const wasHeadlessDetected = Object.values(detectionResults).some(Boolean)
  if (wasHeadlessDetected) {
    console.log(detectionResults)
  }
  t.false(wasHeadlessDetected)
})

async function detectHeadless() {
  const results = {}

  async function test(name, fn) {
    const detectionPassed = await fn()
    if (detectionPassed) console.log(`Chrome headless detected via ${name}`)
    results[name] = detectionPassed
  }

  await test('userAgent', _ => {
    return /HeadlessChrome/.test(window.navigator.userAgent)
  })

  
  if (await compareLooseVersionStrings(navigator.userAgent, '89.0.4339.0') >= 0) {
    await test('navigator.webdriver is not false', _ => {
      return navigator.webdriver !== false
    })
  } else {
    
    
    await test('navigator.webdriver present', _ => {
      return 'webdriver' in navigator
    })

    await test('navigator.webdriver not undefined', _ => {
      return navigator.webdriver !== undefined
    })

