'use strict';


const assert = require('assert');
const util = require('util');
const utils = require('./utils');
const debug = require('debug')('mquery');


function Query(criteria, options) {
  if (!(this instanceof Query))
    return new Query(criteria, options);

  const proto = this.constructor.prototype;

  this.op = proto.op || undefined;

  this.options = Object.assign({}, proto.options);

  this._conditions = proto._conditions
    ? utils.clone(proto._conditions)
    : {};

  this._fields = proto._fields
    ? utils.clone(proto._fields)
    : undefined;

  this._updateDoc = proto._updateDoc
    ? utils.clone(proto._updateDoc)
    : undefined;

  this._path = proto._path || undefined;
  this._distinctDoc = proto._distinctDoc || undefined;
  this._collection = proto._collection || undefined;
  this._traceFunction = proto._traceFunction || undefined;

  if (options) {
    this.setOptions(options);
  }

  if (criteria) {
    this.find(criteria);
  }
}


let $withinCmd = '$geoWithin';
Object.defineProperty(Query, 'use$geoWithin', {
  get: function() { return $withinCmd == '$geoWithin'; },
  set: function(v) {
    if (true === v) {
      
      $withinCmd = '$geoWithin';
    } else {
      $withinCmd = '$within';
    }
  }
});


Query.prototype.toConstructor = function toConstructor() {
  function CustomQuery(criteria, options) {
    if (!(this instanceof CustomQuery))
      return new CustomQuery(criteria, options);
    Query.call(this, criteria, options);
  }

  utils.inherits(CustomQuery, Query);

  
  const p = CustomQuery.prototype;

  p.options = {};
  p.setOptions(this.options);

  p.op = this.op;
  p._conditions = utils.clone(this._conditions);
  p._fields = utils.clone(this._fields);
  p._updateDoc = utils.clone(this._updateDoc);
  p._path = this._path;
  p._distinctDoc = this._distinctDoc;
  p._collection = this._collection;
  p._traceFunction = this._traceFunction;

  return CustomQuery;
};


Query.prototype.setOptions = function(options) {
  if (!(options && utils.isObject(options)))
    return this;

  
  const methods = utils.keys(options);
  let method;

  for (let i = 0; i < methods.length; ++i) {
    method = methods[i];

    
    if ('function' == typeof this[method]) {
      const args = Array.isArray(options[method])
        ? options[method]
        : [options[method]];
      this[method].apply(this, args);
    } else {
      this.options[method] = options[method];
    }
  }

  return this;
};


Query.prototype.collection = function collection(coll) {
  this._collection = new Query.Collection(coll);

  return this;
};


Query.prototype.collation = function(value) {
  this.options.collation = value;
  return this;
};


Query.prototype.$where = function(js) {
  this._conditions.$where = js;
  return this;
};


Query.prototype.where = function() {
  if (!arguments.length) return this;
  if (!this.op) this.op = 'find';

  const type = typeof arguments[0];

  if ('string' == type) {
    this._path = arguments[0];

    if (2 === arguments.length) {
      this._conditions[this._path] = arguments[1];
    }

    return this;
  }

  if ('object' == type && !Array.isArray(arguments[0])) {
    return this.merge(arguments[0]);
  }

  throw new TypeError('path must be a string or object');
};


Query.prototype.equals = function equals(val) {
  this._ensurePath('equals');
  const path = this._path;
  this._conditions[path] = val;
  return this;
};


Query.prototype.eq = function eq(val) {
  this._ensurePath('eq');
  const path = this._path;
  this._conditions[path] = val;
  return this;
};


Query.prototype.or = function or(array) {
  const or = this._conditions.$or || (this._conditions.$or = []);
  if (!Array.isArray(array)) array = [array];
  or.push.apply(or, array);
  return this;
};


Query.prototype.nor = function nor(array) {
  const nor = this._conditions.$nor || (this._conditions.$nor = []);
  if (!Array.isArray(array)) array = [array];
  nor.push.apply(nor, array);
  return this;
};


Query.prototype.and = function and(array) {
  const and = this._conditions.$and || (this._conditions.$and = []);
  if (!Array.isArray(array)) array = [array];
  and.push.apply(and, array);
  return this;
};













'gt gte lt lte ne in nin all regex size maxDistance minDistance'.split(' ').forEach(function($conditional) {
  Query.prototype[$conditional] = function() {
    let path, val;

    if (1 === arguments.length) {
      this._ensurePath($conditional);
      val = arguments[0];
      path = this._path;
    } else {
      val = arguments[1];
      path = arguments[0];
    }

    const conds = this._conditions[path] === null || typeof this._conditions[path] === 'object' ?
      this._conditions[path] :
      (this._conditions[path] = {});
    conds['$' + $conditional] = val;
    return this;
  };
});


Query.prototype.mod = function() {
  let val, path;

  if (1 === arguments.length) {
    this._ensurePath('mod');
    val = arguments[0];
    path = this._path;
  } else if (2 === arguments.length && !Array.isArray(arguments[1])) {
    this._ensurePath('mod');
    val = [arguments[0], arguments[1]];
    path = this._path;
  } else if (3 === arguments.length) {
    val = [arguments[1], arguments[2]];
    path = arguments[0];
  } else {
    val = arguments[1];
    path = arguments[0];
  }

  const conds = this._conditions[path] || (this._conditions[path] = {});
  conds.$mod = val;
  return this;
};


Query.prototype.exists = function() {
  let path, val;

  if (0 === arguments.length) {
    this._ensurePath('exists');
    path = this._path;
    val = true;
  } else if (1 === arguments.length) {
    if ('boolean' === typeof arguments[0]) {
      this._ensurePath('exists');
      path = this._path;
      val = arguments[0];
    } else {
      path = arguments[0];
      val = true;
    }
  } else if (2 === arguments.length) {
    path = arguments[0];
    val = arguments[1];
  }

  const conds = this._conditions[path] || (this._conditions[path] = {});
  conds.$exists = val;
  return this;
};


Query.prototype.elemMatch = function() {
  if (null == arguments[0])
    throw new TypeError('Invalid argument');

  let fn, path, criteria;

  if ('function' === typeof arguments[0]) {
    this._ensurePath('elemMatch');
    path = this._path;
    fn = arguments[0];
  } else if (utils.isObject(arguments[0])) {
    this._ensurePath('elemMatch');
    path = this._path;
    criteria = arguments[0];
  } else if ('function' === typeof arguments[1]) {
    path = arguments[0];
    fn = arguments[1];
  } else if (arguments[1] && utils.isObject(arguments[1])) {
    path = arguments[0];
    criteria = arguments[1];
  } else {
    throw new TypeError('Invalid argument');
  }

  if (fn) {
    criteria = new Query;
    fn(criteria);
    criteria = criteria._conditions;
  }

  const conds = this._conditions[path] || (this._conditions[path] = {});
  conds.$elemMatch = criteria;
  return this;
};




Query.prototype.within = function within() {
  
  this._ensurePath('within');
  this._geoComparison = $withinCmd;

  if (0 === arguments.length) {
    return this;
  }

  if (2 === arguments.length) {
    return this.box.apply(this, arguments);
  } else if (2 < arguments.length) {
    return this.polygon.apply(this, arguments);
  }

  const area = arguments[0];

  if (!area)
    throw new TypeError('Invalid argument');

  if (area.center)
    return this.circle(area);

  if (area.box)
    return this.box.apply(this, area.box);

  if (area.polygon)
    return this.polygon.apply(this, area.polygon);

  if (area.type && area.coordinates)
    return this.geometry(area);

  throw new TypeError('Invalid argument');
};


Query.prototype.box = function() {
  let path, box;

  if (3 === arguments.length) {
    
    path = arguments[0];
    box = [arguments[1], arguments[2]];
  } else if (2 === arguments.length) {
    
    this._ensurePath('box');
    path = this._path;
    box = [arguments[0], arguments[1]];
  } else {
    throw new TypeError('Invalid argument');
  }

  const conds = this._conditions[path] || (this._conditions[path] = {});
  conds[this._geoComparison || $withinCmd] = { $box: box };
  return this;
};


Query.prototype.polygon = function() {
  let val, path;

  if ('string' == typeof arguments[0]) {
    
    val = Array.from(arguments);
    path = val.shift();
  } else {
    
    this._ensurePath('polygon');
    path = this._path;
    val = Array.from(arguments);
  }

  const conds = this._conditions[path] || (this._conditions[path] = {});
  conds[this._geoComparison || $withinCmd] = { $polygon: val };
  return this;
};


Query.prototype.circle = function() {
  let path, val;

  if (1 === arguments.length) {
    this._ensurePath('circle');
    path = this._path;
    val = arguments[0];
  } else if (2 === arguments.length) {
    path = arguments[0];
    val = arguments[1];
  } else {
    throw new TypeError('Invalid argument');
  }

  if (!('radius' in val && val.center))
    throw new Error('center and radius are required');

  const conds = this._conditions[path] || (this._conditions[path] = {});

  const type = val.spherical
    ? '$centerSphere'
    : '$center';

  const wKey = this._geoComparison || $withinCmd;
  conds[wKey] = {};
  conds[wKey][type] = [val.center, val.radius];

  if ('unique' in val)
    conds[wKey].$uniqueDocs = !!val.unique;

  return this;
};


Query.prototype.near = function near() {
  let path, val;

  this._geoComparison = '$near';

  if (0 === arguments.length) {
    return this;
  } else if (1 === arguments.length) {
    this._ensurePath('near');
    path = this._path;
    val = arguments[0];
  } else if (2 === arguments.length) {
    path = arguments[0];
    val = arguments[1];
  } else {
    throw new TypeError('Invalid argument');
  }

  if (!val.center) {
    throw new Error('center is required');
  }

  const conds = this._conditions[path] || (this._conditions[path] = {});

  const type = val.spherical
    ? '$nearSphere'
    : '$near';

  
  if (Array.isArray(val.center)) {
    conds[type] = val.center;

    const radius = 'maxDistance' in val
      ? val.maxDistance
      : null;

    if (null != radius) {
      conds.$maxDistance = radius;
    }
    if (null != val.minDistance) {
      conds.$minDistance = val.minDistance;
    }
  } else {
    
    if (val.center.type != 'Point' || !Array.isArray(val.center.coordinates)) {
      throw new Error(util.format('Invalid GeoJSON specified for %s', type));
    }
    conds[type] = { $geometry: val.center };

    
    if ('maxDistance' in val) {
      conds[type]['$maxDistance'] = val.maxDistance;
    }
    if ('minDistance' in val) {
      conds[type]['$minDistance'] = val.minDistance;
    }
  }

  return this;
};


Query.prototype.intersects = function intersects() {
  
  this._ensurePath('intersects');

  this._geoComparison = '$geoIntersects';

  if (0 === arguments.length) {
    return this;
  }

  const area = arguments[0];

  if (null != area && area.type && area.coordinates)
    return this.geometry(area);

  throw new TypeError('Invalid argument');
};


Query.prototype.geometry = function geometry() {
  if (!('$within' == this._geoComparison ||
        '$geoWithin' == this._geoComparison ||
        '$near' == this._geoComparison ||
        '$geoIntersects' == this._geoComparison)) {
    throw new Error('geometry() must come after `within()`, `intersects()`, or `near()');
  }

  let val, path;

  if (1 === arguments.length) {
    this._ensurePath('geometry');
    path = this._path;
    val = arguments[0];
  } else {
    throw new TypeError('Invalid argument');
  }

  if (!(val.type && Array.isArray(val.coordinates))) {
    throw new TypeError('Invalid argument');
  }

  const conds = this._conditions[path] || (this._conditions[path] = {});
  conds[this._geoComparison] = { $geometry: val };

  return this;
};




Query.prototype.select = function select() {
  let arg = arguments[0];
  if (!arg) return this;

  if (arguments.length !== 1) {
    throw new Error('Invalid select: select only takes 1 argument');
  }

  this._validate('select');

  const fields = this._fields || (this._fields = {});
  const type = typeof arg;
  let i, len;

  if (('string' == type || utils.isArgumentsObject(arg)) &&
    'number' == typeof arg.length || Array.isArray(arg)) {
    if ('string' == type)
      arg = arg.split(/\s+/);

    for (i = 0, len = arg.length; i < len; ++i) {
      let field = arg[i];
      if (!field) continue;
      const include = '-' == field[0] ? 0 : 1;
      if (include === 0) field = field.substring(1);
      fields[field] = include;
    }

    return this;
  }

  if (utils.isObject(arg)) {
    const keys = utils.keys(arg);
    for (i = 0; i < keys.length; ++i) {
      fields[keys[i]] = arg[keys[i]];
    }
    return this;
  }

  throw new TypeError('Invalid select() argument. Must be string or object.');
};


Query.prototype.slice = function() {
  if (0 === arguments.length)
    return this;

  this._validate('slice');

  let path, val;

  if (1 === arguments.length) {
    const arg = arguments[0];
    if (typeof arg === 'object' && !Array.isArray(arg)) {
      const keys = Object.keys(arg);
      const numKeys = keys.length;
      for (let i = 0; i < numKeys; ++i) {
        this.slice(keys[i], arg[keys[i]]);
      }
      return this;
    }
    this._ensurePath('slice');
    path = this._path;
    val = arguments[0];
  } else if (2 === arguments.length) {
    if ('number' === typeof arguments[0]) {
      this._ensurePath('slice');
      path = this._path;
      val = [arguments[0], arguments[1]];
    } else {
      path = arguments[0];
      val = arguments[1];
    }
  } else if (3 === arguments.length) {
    path = arguments[0];
    val = [arguments[1], arguments[2]];
  }

  const myFields = this._fields || (this._fields = {});
  myFields[path] = { $slice: val };
  return this;
};


Query.prototype.sort = function(arg) {
  if (!arg) return this;
  let i, len, field;

  this._validate('sort');

  const type = typeof arg;

  
  if (Array.isArray(arg)) {
    len = arg.length;
    for (i = 0; i < arg.length; ++i) {
      if (!Array.isArray(arg[i])) {
        throw new Error('Invalid sort() argument, must be array of arrays');
      }
      _pushArr(this.options, arg[i][0], arg[i][1]);
    }
    return this;
  }

  
  if (1 === arguments.length && 'string' == type) {
    arg = arg.split(/\s+/);
    len = arg.length;
    for (i = 0; i < len; ++i) {
      field = arg[i];
      if (!field) continue;
      const ascend = '-' == field[0] ? -1 : 1;
      if (ascend === -1) field = field.substring(1);
      push(this.options, field, ascend);
    }

    return this;
  }

  
  if (utils.isObject(arg)) {
    const keys = utils.keys(arg);
    for (i = 0; i < keys.length; ++i) {
      field = keys[i];
      push(this.options, field, arg[field]);
    }

    return this;
  }

  if (typeof Map !== 'undefined' && arg instanceof Map) {
    _pushMap(this.options, arg);
    return this;
  }
  throw new TypeError('Invalid sort() argument. Must be a string, object, or array.');
};


const _validSortValue = {
  1: 1,
  '-1': -1,
  asc: 1,
  ascending: 1,
  desc: -1,
  descending: -1
};

function push(opts, field, value) {
  if (Array.isArray(opts.sort)) {
    throw new TypeError('Can\'t mix sort syntaxes. Use either array or object:' +
      '\n- `.sort([[\'field\', 1], [\'test\', -1]])`' +
      '\n- `.sort({ field: 1, test: -1 })`');
  }

  let s;
  if (value && value.$meta) {
    s = opts.sort || (opts.sort = {});
    s[field] = { $meta: value.$meta };
    return;
  }

  s = opts.sort || (opts.sort = {});
  let val = String(value || 1).toLowerCase();
  val = _validSortValue[val];
  if (!val) throw new TypeError('Invalid sort value: { ' + field + ': ' + value + ' }');

  s[field] = val;
}

function _pushArr(opts, field, value) {
  opts.sort = opts.sort || [];
  if (!Array.isArray(opts.sort)) {
    throw new TypeError('Can\'t mix sort syntaxes. Use either array or object:' +
      '\n- `.sort([[\'field\', 1], [\'test\', -1]])`' +
      '\n- `.sort({ field: 1, test: -1 })`');
  }

  let val = String(value || 1).toLowerCase();
  val = _validSortValue[val];
  if (!val) throw new TypeError('Invalid sort value: [ ' + field + ', ' + value + ' ]');

  opts.sort.push([field, val]);
}

function _pushMap(opts, map) {
  opts.sort = opts.sort || new Map();
  if (!(opts.sort instanceof Map)) {
    throw new TypeError('Can\'t mix sort syntaxes. Use either array or ' +
      'object or map consistently');
  }
  map.forEach(function(value, key) {
    let val = String(value || 1).toLowerCase();
    val = _validSortValue[val];
    if (!val) throw new TypeError('Invalid sort value: < ' + key + ': ' + value + ' >');

    opts.sort.set(key, val);
  });
}




['limit', 'skip', 'batchSize', 'comment'].forEach(function(method) {
  Query.prototype[method] = function(v) {
    this._validate(method);
    this.options[method] = v;
    return this;
  };
});


Query.prototype.maxTime = Query.prototype.maxTimeMS = function(ms) {
  this._validate('maxTime');
  this.options.maxTimeMS = ms;
  return this;
};


Query.prototype.hint = function() {
  if (0 === arguments.length) return this;

  this._validate('hint');

  const arg = arguments[0];
  if (utils.isObject(arg)) {
    const hint = this.options.hint || (this.options.hint = {});

    
    for (const k in arg) {
      hint[k] = arg[k];
    }

    return this;
  }
  if (typeof arg === 'string') {
    this.options.hint = arg;
    return this;
  }

  throw new TypeError('Invalid hint. ' + arg);
};


Query.prototype.j = function j(val) {
  this.options.j = val;
  return this;
};


Query.prototype.slaveOk = function(v) {
  this.options.slaveOk = arguments.length ? !!v : true;
  return this;
};


Query.prototype.read = Query.prototype.setReadPreference = function(pref) {
  if (arguments.length > 1 && !Query.prototype.read.deprecationWarningIssued) {
    console.error('Deprecation warning: \'tags\' argument is not supported anymore in Query.read() method. Please use mongodb.ReadPreference object instead.');
    Query.prototype.read.deprecationWarningIssued = true;
  }
  this.options.readPreference = utils.readPref(pref);
  return this;
};


Query.prototype.readConcern = Query.prototype.r = function(level) {
  this.options.readConcern = utils.readConcern(level);
  return this;
};


Query.prototype.tailable = function() {
  this._validate('tailable');

  this.options.tailable = arguments.length
    ? !!arguments[0]
    : true;

  return this;
};


Query.prototype.writeConcern = Query.prototype.w = function writeConcern(concern) {
  if ('object' === typeof concern) {
    if ('undefined' !== typeof concern.j) this.options.j = concern.j;
    if ('undefined' !== typeof concern.w) this.options.w = concern.w;
    if ('undefined' !== typeof concern.wtimeout) this.options.wtimeout = concern.wtimeout;
  } else {
    this.options.w = 'm' === concern ? 'majority' : concern;
  }
  return this;
};


Query.prototype.wtimeout = Query.prototype.wTimeout = function wtimeout(ms) {
  this.options.wtimeout = ms;
  return this;
};


Query.prototype.merge = function(source) {
  if (!source)
    return this;

  if (!Query.canMerge(source))
    throw new TypeError('Invalid argument. Expected instanceof mquery or plain object');

  if (source instanceof Query) {
    

    if (source._conditions) {
      utils.merge(this._conditions, source._conditions);
    }

    if (source._fields) {
      this._fields || (this._fields = {});
      utils.merge(this._fields, source._fields);
    }

    if (source.options) {
      this.options || (this.options = {});
      utils.merge(this.options, source.options);
    }

    if (source._updateDoc) {
      this._updateDoc || (this._updateDoc = {});
      utils.mergeClone(this._updateDoc, source._updateDoc);
    }

    if (source._distinctDoc) {
      this._distinctDoc = source._distinctDoc;
    }

    return this;
  }

  
  utils.merge(this._conditions, source);

  return this;
};


Query.prototype.find = function(criteria) {
  this.op = 'find';

  if (Query.canMerge(criteria)) {
    this.merge(criteria);
  }

  return this;
};

Query.prototype._find = async function _find() {
  const conds = this._conditions;
  const options = this._optionsForExec();

  if (this.$useProjection) {
    options.projection = this._fieldsForExec();
  } else {
    options.fields = this._fieldsForExec();
  }

  debug('_find', this._collection.collectionName, conds, options);

  return this._collection.find(conds, options);
};


Query.prototype.cursor = function cursor(criteria) {
  if (this.op) {
    if (this.op !== 'find') {
      throw new TypeError('.cursor only support .find method');
    }
  } else {
    this.find(criteria);
  }

  const conds = this._conditions;
  const options = this._optionsForExec();

  if (this.$useProjection) {
    options.projection = this._fieldsForExec();
  } else {
    options.fields = this._fieldsForExec();
  }

  debug('findCursor', this._collection.collectionName, conds, options);
  return this._collection.findCursor(conds, options);
};


Query.prototype.findOne = function(criteria) {
  this.op = 'findOne';

  if (Query.canMerge(criteria)) {
    this.merge(criteria);
  }

  return this;
};

Query.prototype._findOne = async function _findOne() {
  const conds = this._conditions;
  const options = this._optionsForExec();

  if (this.$useProjection) {
    options.projection = this._fieldsForExec();
  } else {
    options.fields = this._fieldsForExec();
  }

  debug('findOne', this._collection.collectionName, conds, options);

  return this._collection.findOne(conds, options);
};


Query.prototype.count = function(criteria) {
  this.op = 'count';
  this._validate();

  if (Query.canMerge(criteria)) {
    this.merge(criteria);
  }

  return this;
};

Query.prototype._count = async function _count() {
  const conds = this._conditions,
      options = this._optionsForExec();

  debug('count', this._collection.collectionName, conds, options);

  return this._collection.count(conds, options);
};


Query.prototype.distinct = function(criteria, field) {
  this.op = 'distinct';
  this._validate();

  if (!field && typeof criteria === 'string') {
    field = criteria;
    criteria = undefined;
  }

  if ('string' == typeof field) {
    this._distinctDoc = field;
  }

  if (Query.canMerge(criteria)) {
    this.merge(criteria);
  }

  return this;
};

Query.prototype._distinct = async function _distinct() {
  if (!this._distinctDoc) {
    throw new Error('No value for `distinct` has been declared');
  }

  const conds = this._conditions,
      options = this._optionsForExec();

  debug('distinct', this._collection.collectionName, conds, options);

  return this._collection.distinct(this._distinctDoc, conds, options);
};


Query.prototype.updateMany = function updateMany(criteria, doc, options) {
  if (arguments.length === 1) {
    doc = criteria;
    criteria = options = undefined;
  }

  return _update(this, 'updateMany', criteria, doc, options);
};

Query.prototype._updateMany = async function() {
  return _updateExec(this, 'updateMany');
};


Query.prototype.updateOne = function updateOne(criteria, doc, options) {
  if (arguments.length === 1) {
    doc = criteria;
    criteria = options = undefined;
  }

  return _update(this, 'updateOne', criteria, doc, options);
};

Query.prototype._updateOne = async function() {
  return _updateExec(this, 'updateOne');
};


Query.prototype.replaceOne = function replaceOne(criteria, doc, options) {
  if (arguments.length === 1) {
    doc = criteria;
    criteria = options = undefined;
  }

  this.setOptions({ overwrite: true });
  return _update(this, 'replaceOne', criteria, doc, options);
};

Query.prototype._replaceOne = async function() {
  return _updateExec(this, 'replaceOne');
};


function _update(query, op, criteria, doc, options) {
  query.op = op;

  if (Query.canMerge(criteria)) {
    query.merge(criteria);
  }

  if (doc) {
    query._mergeUpdate(doc);
  }

  if (utils.isObject(options)) {
    
    query.setOptions(options);
  }

  return query;
}

async function _updateExec(query, op) {
  const options = query._optionsForExec();

  const criteria = query._conditions;
  const doc = query._updateForExec();

  debug('update', query._collection.collectionName, criteria, doc, options);

  return query._collection[op](criteria, doc, options);
}


Query.prototype.deleteOne = function(criteria) {
  this.op = 'deleteOne';

  if (Query.canMerge(criteria)) {
    this.merge(criteria);
  }

  return this;
};

Query.prototype._deleteOne = async function() {
  const options = this._optionsForExec();
  delete options.justOne;

  const conds = this._conditions;

  debug('deleteOne', this._collection.collectionName, conds, options);

  return this._collection.deleteOne(conds, options);
};


Query.prototype.deleteMany = function(criteria) {
  this.op = 'deleteMany';

  if (Query.canMerge(criteria)) {
    this.merge(criteria);
  }

  return this;
};

Query.prototype._deleteMany = async function() {
  const options = this._optionsForExec();
  delete options.justOne;

  const conds = this._conditions;

  debug('deleteOne', this._collection.collectionName, conds, options);

  return this._collection.deleteMany(conds, options);
};


Query.prototype.findOneAndUpdate = function(criteria, doc, options) {
  this.op = 'findOneAndUpdate';
  this._validate();

  if (arguments.length === 1) {
    doc = criteria;
    criteria = options = undefined;
  }

  if (Query.canMerge(criteria)) {
    this.merge(criteria);
  }

  
  if (doc) {
    this._mergeUpdate(doc);
  }

  options && this.setOptions(options);

  return this;
};

Query.prototype._findOneAndUpdate = async function() {
  const conds = this._conditions;
  const update = this._updateForExec();
  const options = this._optionsForExec();

  return this._collection.findOneAndUpdate(conds, update, options);
};


Query.prototype.findOneAndRemove = Query.prototype.findOneAndDelete = function(conditions, options) {
  this.op = 'findOneAndRemove';
  this._validate();

  
  if (Query.canMerge(conditions)) {
    this.merge(conditions);
  }

  
  options && this.setOptions(options);

  return this;
};

Query.prototype._findOneAndRemove = async function() {
  const options = this._optionsForExec();
  const conds = this._conditions;

  return this._collection.findOneAndDelete(conds, options);
};

Query.prototype.setTraceFunction = function(traceFunction) {
  this._traceFunction = traceFunction;
  return this;
};


Query.prototype.exec = async function exec(op) {
  if (typeof op === 'string') {
    this.op = op;
  }

  assert.ok(this.op, 'Missing query type: (find, etc)');

  const fnName = '_' + this.op;

  
  if (typeof this[fnName] !== 'function') {
    throw new TypeError(`this[${fnName}] is not a function`);
  }

  return this[fnName]();
};


Query.prototype.then = async function(res, rej) {
  return this.exec().then(res, rej);
};


Query.prototype.cursor = function() {
  if ('find' != this.op)
    throw new Error('cursor() is only available for find');

  const conds = this._conditions;

  const options = this._optionsForExec();
  if (this.$useProjection) {
    options.projection = this._fieldsForExec();
  } else {
    options.fields = this._fieldsForExec();
  }

  debug('cursor', this._collection.collectionName, conds, options);

  return this._collection.findCursor(conds, options);
};


Query.prototype.selected = function selected() {
  return !!(this._fields && Object.keys(this._fields).length > 0);
};


Query.prototype.selectedInclusively = function selectedInclusively() {
  if (!this._fields) return false;

  const keys = Object.keys(this._fields);
  if (0 === keys.length) return false;

  for (let i = 0; i < keys.length; ++i) {
    const key = keys[i];
    if (0 === this._fields[key]) return false;
    if (this._fields[key] &&
        typeof this._fields[key] === 'object' &&
        this._fields[key].$meta) {
      return false;
    }
  }

  return true;
};


Query.prototype.selectedExclusively = function selectedExclusively() {
  if (!this._fields) return false;

  const keys = Object.keys(this._fields);
  if (0 === keys.length) return false;

  for (let i = 0; i < keys.length; ++i) {
    const key = keys[i];
    if (0 === this._fields[key]) return true;
  }

  return false;
};


Query.prototype._mergeUpdate = function(doc) {
  if (!this._updateDoc) this._updateDoc = {};
  if (doc instanceof Query) {
    if (doc._updateDoc) {
      utils.mergeClone(this._updateDoc, doc._updateDoc);
    }
  } else {
    utils.mergeClone(this._updateDoc, doc);
  }
};


Query.prototype._optionsForExec = function() {
  const options = utils.clone(this.options);
  return options;
};


Query.prototype._fieldsForExec = function() {
  return utils.clone(this._fields);
};


Query.prototype._updateForExec = function() {
  const update = utils.clone(this._updateDoc);
  const ops = utils.keys(update);
  const ret = {};

  for (const op of ops) {
    if (this.options.overwrite) {
      ret[op] = update[op];
      continue;
    }

    if ('$' !== op[0]) {
      
      if (!ret.$set) {
        if (update.$set) {
          ret.$set = update.$set;
        } else {
          ret.$set = {};
        }
      }
      ret.$set[op] = update[op];
      if (!~ops.indexOf('$set')) ops.push('$set');
    } else if ('$set' === op) {
      if (!ret.$set) {
        ret[op] = update[op];
      }
    } else {
      ret[op] = update[op];
    }
  }

  this._compiledUpdate = ret;
  return ret;
};


Query.prototype._ensurePath = function(method) {
  if (!this._path) {
    const msg = method + '() must be used after where() '
                     + 'when called with these arguments';
    throw new Error(msg);
  }
};


Query.permissions = require('./permissions');

Query._isPermitted = function(a, b) {
  const denied = Query.permissions[b];
  if (!denied) return true;
  return true !== denied[a];
};

Query.prototype._validate = function(action) {
  let fail;
  let validator;

  if (undefined === action) {

    validator = Query.permissions[this.op];
    if ('function' != typeof validator) return true;

    fail = validator(this);

  } else if (!Query._isPermitted(action, this.op)) {
    fail = action;
  }

  if (fail) {
    throw new Error(fail + ' cannot be used with ' + this.op);
  }
};


Query.canMerge = function(conds) {
  return conds instanceof Query || utils.isObject(conds);
};

Query.setGlobalTraceFunction = function(traceFunction) {
  Query.traceFunction = traceFunction;
};


Query.utils = utils;
Query.env = require('./env');
Query.Collection = require('./collection');
Query.BaseCollection = require('./collection/collection');
module.exports = exports = Query;



