"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventEmitter = void 0;
const mitt_js_1 = __importDefault(require("../../third_party/mitt/mitt.js"));
const disposable_js_1 = require("../util/disposable.js");
class EventEmitter {
    #emitter;
    #handlers = new Map();
    constructor(emitter = (0, mitt_js_1.default)(new Map())) {
        this.#emitter = emitter;
    }
    on(type, handler) {
        const handlers = this.#handlers.get(type);
        if (handlers === undefined) {
            this.#handlers.set(type, [handler]);
        }
        else {
            handlers.push(handler);
        }
        this.#emitter.on(type, handler);
        return this;
    }
    off(type, handler) {
        const handlers = this.#handlers.get(type) ?? [];
        if (handler === undefined) {
            for (const handler of handlers) {
                this.#emitter.off(type, handler);
            }
            this.#handlers.delete(type);
            return this;
        }
        const index = handlers.lastIndexOf(handler);
        if (index > -1) {
            this.#emitter.off(type, ...handlers.splice(index, 1));
        }
        return this;
    }
    emit(type, event) {
        this.#emitter.emit(type, event);
        return this.listenerCount(type) > 0;
    }
    once(type, handler) {
        const onceHandler = eventData => {
            handler(eventData);
            this.off(type, onceHandler);
        };
        return this.on(type, onceHandler);
    }
    listenerCount(type) {
        return this.#handlers.get(type)?.length || 0;
    }
    removeAllListeners(type) {
        if (type !== undefined) {
            return this.off(type);
        }
        this[disposable_js_1.disposeSymbol]();
        return this;
    }
    [disposable_js_1.disposeSymbol]() {
        for (const [type, handlers] of this.#handlers) {
            for (const handler of handlers) {
                this.#emitter.off(type, handler);
            }
        }
        this.#handlers.clear();
    }
}
exports.EventEmitter = EventEmitter;
