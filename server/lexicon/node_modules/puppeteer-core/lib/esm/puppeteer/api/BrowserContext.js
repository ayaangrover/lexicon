import { firstValueFrom, from, merge, raceWith, } from '../../third_party/rxjs/rxjs.js';
import { EventEmitter } from '../common/EventEmitter.js';
import { debugError, fromEmitterEvent, filterAsync, timeout, } from '../common/util.js';
import { asyncDisposeSymbol, disposeSymbol } from '../util/disposable.js';
import { Mutex } from '../util/Mutex.js';
export class BrowserContext extends EventEmitter {
    constructor() {
        super();
    }
    #pageScreenshotMutex;
    #screenshotOperationsCount = 0;
    startScreenshot() {
        const mutex = this.#pageScreenshotMutex || new Mutex();
        this.#pageScreenshotMutex = mutex;
        this.#screenshotOperationsCount++;
        return mutex.acquire(() => {
            this.#screenshotOperationsCount--;
            if (this.#screenshotOperationsCount === 0) {
                
                this.#pageScreenshotMutex = undefined;
            }
        });
    }
    waitForScreenshotOperations() {
        return this.#pageScreenshotMutex?.acquire();
    }
    async waitForTarget(predicate, options = {}) {
        const { timeout: ms = 30000 } = options;
    async deleteCookie(...cookies) {
        return await this.setCookie(...cookies.map(cookie => {
            return {
                ...cookie,
                expires: 1,
            };
        }));
    }
    get closed() {
        return !this.browser().browserContexts().includes(this);
    }
    get id() {
        return undefined;
    }
    [asyncDisposeSymbol]() {
        return this.close();
    }
}
