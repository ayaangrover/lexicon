import { InvalidWebExtensionException, UnsupportedOperationException, NoSuchWebExtensionException, } from '../../../protocol/protocol.js';
export class WebExtensionProcessor {
    #browserCdpClient;
    constructor(browserCdpClient) {
        this.#browserCdpClient = browserCdpClient;
    }
    async install(params) {
        switch (params.extensionData.type) {
            case 'archivePath':
            case 'base64':
                throw new UnsupportedOperationException('Archived and Base64 extensions are not supported');
            case 'path':
                break;
        }
        try {
            const response = await this.#browserCdpClient.sendCommand('Extensions.loadUnpacked', {
                path: params.extensionData.path,
            });
            return {
                extension: response.id,
            };
        }
        catch (err) {
            if (err.message.startsWith('invalid web extension')) {
                throw new InvalidWebExtensionException(err.message);
            }
            throw err;
        }
    }
    async uninstall(params) {
        try {
            await this.#browserCdpClient.sendCommand('Extensions.uninstall', {
                id: params.extension,
            });
            return {};
        }
        catch (err) {
            if (err.message ===
                'Uninstall failed. Reason: could not find extension.') {
                throw new NoSuchWebExtensionException('no such web extension');
            }
            throw err;
        }
    }
}
