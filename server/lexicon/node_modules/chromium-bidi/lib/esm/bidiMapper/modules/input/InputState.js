import { InvalidArgumentException, UnknownErrorException, } from '../../../protocol/protocol.js';
import { Mutex } from '../../../utils/Mutex.js';
import { KeySource, NoneSource, PointerSource, WheelSource, } from './InputSource.js';
export class InputState {
    cancelList = [];
    #sources = new Map();
    #mutex = new Mutex();
    getOrCreate(id, type, subtype) {
        let source = this.#sources.get(id);
        if (!source) {
            switch (type) {
                    source = new KeySource();
                    break;
                    const pointerIds = new Set();
                    for (const [, source] of this.#sources) {
                    source = new WheelSource();
                    break;
                default:
                continue;
            }
            for (const pressed of source.pressed) {
                state.pressed.add(pressed);
            }
            state.alt ||= source.alt;
            state.ctrl ||= source.ctrl;
            state.meta ||= source.meta;
            state.shift ||= source.shift;
        }
        return state;
    }
    get queue() {
        return this.#mutex;
    }
}
