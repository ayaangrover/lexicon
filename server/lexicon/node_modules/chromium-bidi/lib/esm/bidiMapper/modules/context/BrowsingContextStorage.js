import { NoSuchFrameException, InvalidArgumentException, } from '../../../protocol/protocol.js';
import { EventEmitter } from '../../../utils/EventEmitter.js';
    #contexts = new Map();
    #eventEmitter = new EventEmitter();
    getAllContexts() {
        return Array.from(this.#contexts.values());
    }
    deleteContext(context) {
        this.#contexts.delete(context.id);
    }
            browsingContext: context,
        });
    }
    waitForContext(browsingContextId) {
        if (this.#contexts.has(browsingContextId)) {
            return Promise.resolve(this.getContext(browsingContextId));
        }
        return new Promise((resolve) => {
            const listener = (event) => {
                if (event.browsingContext.id === browsingContextId) {
        });
    }
    findContext(id) {
        return this.#contexts.get(id);
    }
    getContext(id) {
        const result = this.findContext(id);
        if (result === undefined) {
            throw new NoSuchFrameException(`Context ${id} not found`);
        }
        return result;
    }
    verifyTopLevelContextsList(contexts) {
        const foundContexts = new Set();
        if (!contexts) {
            return foundContexts;
        }
        for (const contextId of contexts) {
            const context = this.getContext(contextId);
            if (context.isTopLevelContext()) {
                foundContexts.add(context);
            }
            else {
                throw new InvalidArgumentException(`Non top-level context '${contextId}' given.`);
            }
        }
        return foundContexts;
    }
    verifyContextsList(contexts) {
        if (!contexts.length) {
            return;
        }
        for (const contextId of contexts) {
            this.getContext(contextId);
        }
    }
}
