import { NoSuchUserContextException, } from '../../../protocol/protocol.js';
export class UserContextStorage {
    #browserClient;
    constructor(browserClient) {
        this.#browserClient = browserClient;
    }
    async getUserContexts() {
        const result = await this.#browserClient.sendCommand('Target.getBrowserContexts');
        return [
            {
                userContext: 'default',
            },
            ...result.browserContextIds.map((id) => {
                return {
                    userContext: id,
                };
            }),
        ];
    }
    async verifyUserContextIdList(userContextIds) {
        const foundContexts = new Set();
        if (!userContextIds.length) {
            return foundContexts;
        }
        const userContexts = await this.getUserContexts();
        const knownUserContextIds = new Set(userContexts.map((userContext) => userContext.userContext));
        for (const userContextId of userContextIds) {
            if (!knownUserContextIds.has(userContextId)) {
                throw new NoSuchUserContextException(`User context ${userContextId} not found`);
            }
            foundContexts.add(userContextId);
        }
        return foundContexts;
    }
}
