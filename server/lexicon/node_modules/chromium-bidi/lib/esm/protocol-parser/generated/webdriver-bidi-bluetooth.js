

import z from 'zod';
export var Bluetooth;
(function (Bluetooth) {
    Bluetooth.BluetoothServiceUuidSchema = z.lazy(() => z.string());
})(Bluetooth || (Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.BluetoothManufacturerDataSchema = z.lazy(() => z.object({
        key: z.number().int().nonnegative(),
        data: z.string(),
    }));
})(Bluetooth || (Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.RequestDeviceSchema = z.lazy(() => z.string());
})(Bluetooth || (Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.RequestDeviceInfoSchema = z.lazy(() => z.object({
        id: Bluetooth.RequestDeviceSchema,
        name: z.union([z.string(), z.null()]),
    }));
})(Bluetooth || (Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.RequestDevicePromptSchema = z.lazy(() => z.string());
})(Bluetooth || (Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.ScanRecordSchema = z.lazy(() => z.object({
        name: z.string().optional(),
        uuids: z.array(Bluetooth.BluetoothServiceUuidSchema).optional(),
        appearance: z.number().optional(),
        manufacturerData: z
            .array(Bluetooth.BluetoothManufacturerDataSchema)
            .optional(),
    }));
})(Bluetooth || (Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.HandleRequestDevicePromptSchema = z.lazy(() => z.object({
        method: z.literal('bluetooth.handleRequestDevicePrompt'),
        params: Bluetooth.HandleRequestDevicePromptParametersSchema,
    }));
})(Bluetooth || (Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.HandleRequestDevicePromptParametersSchema = z.lazy(() => z
        .object({
        context: z.string(),
        prompt: Bluetooth.RequestDevicePromptSchema,
    })
        .and(z.union([
        Bluetooth.HandleRequestDevicePromptAcceptParametersSchema,
        Bluetooth.HandleRequestDevicePromptCancelParametersSchema,
    ])));
})(Bluetooth || (Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.HandleRequestDevicePromptAcceptParametersSchema = z.lazy(() => z.object({
        accept: z.literal(true),
        device: Bluetooth.RequestDeviceSchema,
    }));
})(Bluetooth || (Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.HandleRequestDevicePromptCancelParametersSchema = z.lazy(() => z.object({
        accept: z.literal(false),
    }));
})(Bluetooth || (Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.SimulateAdapterSchema = z.lazy(() => z.object({
        method: z.literal('bluetooth.simulateAdapter'),
        params: Bluetooth.SimulateAdapterParametersSchema,
    }));
})(Bluetooth || (Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.SimulateAdapterParametersSchema = z.lazy(() => z.object({
        context: z.string(),
        type: z.enum(['create', 'update', 'remove']),
        leSupported: z.boolean().optional(),
        state: z.enum(['absent', 'powered-off', 'powered-on']).optional(),
    }));
})(Bluetooth || (Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.SimulatePreconnectedPeripheralSchema = z.lazy(() => z.object({
        method: z.literal('bluetooth.simulatePreconnectedPeripheral'),
        params: Bluetooth.SimulatePreconnectedPeripheralParametersSchema,
    }));
})(Bluetooth || (Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.SimulatePreconnectedPeripheralParametersSchema = z.lazy(() => z.object({
        context: z.string(),
        address: z.string(),
        name: z.string(),
        manufacturerData: z.array(Bluetooth.BluetoothManufacturerDataSchema),
        knownServiceUuids: z.array(Bluetooth.BluetoothServiceUuidSchema),
    }));
})(Bluetooth || (Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.SimulateAdvertisementSchema = z.lazy(() => z.object({
        method: z.literal('bluetooth.simulateAdvertisement'),
        params: Bluetooth.SimulateAdvertisementParametersSchema,
    }));
})(Bluetooth || (Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.SimulateAdvertisementParametersSchema = z.lazy(() => z.object({
        context: z.string(),
        scanEntry: Bluetooth.SimulateAdvertisementScanEntryParametersSchema,
    }));
})(Bluetooth || (Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.SimulateAdvertisementScanEntryParametersSchema = z.lazy(() => z.object({
        deviceAddress: z.string(),
        rssi: z.number(),
        scanRecord: Bluetooth.ScanRecordSchema,
    }));
})(Bluetooth || (Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.RequestDevicePromptUpdatedSchema = z.lazy(() => z.object({
        method: z.literal('bluetooth.requestDevicePromptUpdated'),
        params: Bluetooth.RequestDevicePromptUpdatedParametersSchema,
    }));
})(Bluetooth || (Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.RequestDevicePromptUpdatedParametersSchema = z.lazy(() => z.object({
        context: z.string(),
        prompt: Bluetooth.RequestDevicePromptSchema,
        devices: z.array(Bluetooth.RequestDeviceInfoSchema),
    }));
})(Bluetooth || (Bluetooth = {}));
