export class Exception extends Error {
    error;
    message;
    stacktrace;
    constructor(error, message, stacktrace) {
        super();
        this.error = error;
        this.message = message;
        this.stacktrace = stacktrace;
    }
    toErrorResponse(commandId) {
        return {
            type: 'error',
            id: commandId,
            error: this.error,
            message: this.message,
            stacktrace: this.stacktrace,
        };
    }
}
export class InvalidArgumentException extends Exception {
    constructor(message, stacktrace) {
    }
}
export class InvalidSessionIdException extends Exception {
    constructor(message, stacktrace) {
    }
}
export class NoSuchAlertException extends Exception {
    constructor(message, stacktrace) {
    }
}
export class NoSuchFrameException extends Exception {
    constructor(message, stacktrace) {
    }
}
export class NoSuchHistoryEntryException extends Exception {
    constructor(message, stacktrace) {
    }
}
export class NoSuchNodeException extends Exception {
    constructor(message, stacktrace) {
    }
}
export class NoSuchScriptException extends Exception {
    constructor(message, stacktrace) {
    }
}
export class SessionNotCreatedException extends Exception {
    constructor(message, stacktrace) {
    }
}
export class UnknownErrorException extends Exception {
    constructor(message, stacktrace = new Error().stack) {
    }
}
export class UnableToCloseBrowserException extends Exception {
    constructor(message, stacktrace) {
    }
}
export class NoSuchStoragePartitionException extends Exception {
    constructor(message, stacktrace) {
    }
}
export class UnableToSetFileInputException extends Exception {
    constructor(message, stacktrace) {
    }
}
export class InvalidWebExtensionException extends Exception {
    constructor(message, stacktrace) {
    }
}
