"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bluetooth = void 0;


const zod_1 = __importDefault(require("zod"));
var Bluetooth;
(function (Bluetooth) {
    Bluetooth.BluetoothServiceUuidSchema = zod_1.default.lazy(() => zod_1.default.string());
})(Bluetooth || (exports.Bluetooth = Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.BluetoothManufacturerDataSchema = zod_1.default.lazy(() => zod_1.default.object({
        key: zod_1.default.number().int().nonnegative(),
        data: zod_1.default.string(),
    }));
})(Bluetooth || (exports.Bluetooth = Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.RequestDeviceSchema = zod_1.default.lazy(() => zod_1.default.string());
})(Bluetooth || (exports.Bluetooth = Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.RequestDeviceInfoSchema = zod_1.default.lazy(() => zod_1.default.object({
        id: Bluetooth.RequestDeviceSchema,
        name: zod_1.default.union([zod_1.default.string(), zod_1.default.null()]),
    }));
})(Bluetooth || (exports.Bluetooth = Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.RequestDevicePromptSchema = zod_1.default.lazy(() => zod_1.default.string());
})(Bluetooth || (exports.Bluetooth = Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.ScanRecordSchema = zod_1.default.lazy(() => zod_1.default.object({
        name: zod_1.default.string().optional(),
        uuids: zod_1.default.array(Bluetooth.BluetoothServiceUuidSchema).optional(),
        appearance: zod_1.default.number().optional(),
        manufacturerData: zod_1.default
            .array(Bluetooth.BluetoothManufacturerDataSchema)
            .optional(),
    }));
})(Bluetooth || (exports.Bluetooth = Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.HandleRequestDevicePromptSchema = zod_1.default.lazy(() => zod_1.default.object({
        method: zod_1.default.literal('bluetooth.handleRequestDevicePrompt'),
        params: Bluetooth.HandleRequestDevicePromptParametersSchema,
    }));
})(Bluetooth || (exports.Bluetooth = Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.HandleRequestDevicePromptParametersSchema = zod_1.default.lazy(() => zod_1.default
        .object({
        context: zod_1.default.string(),
        prompt: Bluetooth.RequestDevicePromptSchema,
    })
        .and(zod_1.default.union([
        Bluetooth.HandleRequestDevicePromptAcceptParametersSchema,
        Bluetooth.HandleRequestDevicePromptCancelParametersSchema,
    ])));
})(Bluetooth || (exports.Bluetooth = Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.HandleRequestDevicePromptAcceptParametersSchema = zod_1.default.lazy(() => zod_1.default.object({
        accept: zod_1.default.literal(true),
        device: Bluetooth.RequestDeviceSchema,
    }));
})(Bluetooth || (exports.Bluetooth = Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.HandleRequestDevicePromptCancelParametersSchema = zod_1.default.lazy(() => zod_1.default.object({
        accept: zod_1.default.literal(false),
    }));
})(Bluetooth || (exports.Bluetooth = Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.SimulateAdapterSchema = zod_1.default.lazy(() => zod_1.default.object({
        method: zod_1.default.literal('bluetooth.simulateAdapter'),
        params: Bluetooth.SimulateAdapterParametersSchema,
    }));
})(Bluetooth || (exports.Bluetooth = Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.SimulateAdapterParametersSchema = zod_1.default.lazy(() => zod_1.default.object({
        context: zod_1.default.string(),
        type: zod_1.default.enum(['create', 'update', 'remove']),
        leSupported: zod_1.default.boolean().optional(),
        state: zod_1.default.enum(['absent', 'powered-off', 'powered-on']).optional(),
    }));
})(Bluetooth || (exports.Bluetooth = Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.SimulatePreconnectedPeripheralSchema = zod_1.default.lazy(() => zod_1.default.object({
        method: zod_1.default.literal('bluetooth.simulatePreconnectedPeripheral'),
        params: Bluetooth.SimulatePreconnectedPeripheralParametersSchema,
    }));
})(Bluetooth || (exports.Bluetooth = Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.SimulatePreconnectedPeripheralParametersSchema = zod_1.default.lazy(() => zod_1.default.object({
        context: zod_1.default.string(),
        address: zod_1.default.string(),
        name: zod_1.default.string(),
        manufacturerData: zod_1.default.array(Bluetooth.BluetoothManufacturerDataSchema),
        knownServiceUuids: zod_1.default.array(Bluetooth.BluetoothServiceUuidSchema),
    }));
})(Bluetooth || (exports.Bluetooth = Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.SimulateAdvertisementSchema = zod_1.default.lazy(() => zod_1.default.object({
        method: zod_1.default.literal('bluetooth.simulateAdvertisement'),
        params: Bluetooth.SimulateAdvertisementParametersSchema,
    }));
})(Bluetooth || (exports.Bluetooth = Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.SimulateAdvertisementParametersSchema = zod_1.default.lazy(() => zod_1.default.object({
        context: zod_1.default.string(),
        scanEntry: Bluetooth.SimulateAdvertisementScanEntryParametersSchema,
    }));
})(Bluetooth || (exports.Bluetooth = Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.SimulateAdvertisementScanEntryParametersSchema = zod_1.default.lazy(() => zod_1.default.object({
        deviceAddress: zod_1.default.string(),
        rssi: zod_1.default.number(),
        scanRecord: Bluetooth.ScanRecordSchema,
    }));
})(Bluetooth || (exports.Bluetooth = Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.RequestDevicePromptUpdatedSchema = zod_1.default.lazy(() => zod_1.default.object({
        method: zod_1.default.literal('bluetooth.requestDevicePromptUpdated'),
        params: Bluetooth.RequestDevicePromptUpdatedParametersSchema,
    }));
})(Bluetooth || (exports.Bluetooth = Bluetooth = {}));
(function (Bluetooth) {
    Bluetooth.RequestDevicePromptUpdatedParametersSchema = zod_1.default.lazy(() => zod_1.default.object({
        context: zod_1.default.string(),
        prompt: Bluetooth.RequestDevicePromptSchema,
        devices: zod_1.default.array(Bluetooth.RequestDeviceInfoSchema),
    }));
})(Bluetooth || (exports.Bluetooth = Bluetooth = {}));
