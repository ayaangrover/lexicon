"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RELEASE_ASYNC = exports.DEBUG_ASYNC = exports.RELEASE_SYNC = exports.DEBUG_SYNC = exports.memoizePromiseFactory = exports.newQuickJSAsyncWASMModule = exports.newQuickJSWASMModule = void 0;
const esmHelpers_1 = require("./esmHelpers");
async function newQuickJSWASMModule(
variant = exports.RELEASE_SYNC) {
    const [wasmModuleLoader, QuickJSFFI, { QuickJSWASMModule }] = await Promise.all([
        variant.importModuleLoader(),
        variant.importFFI(),
        Promise.resolve().then(() => __importStar(require("./module.js"))).then(esmHelpers_1.unwrapTypescript),
    ]);
    const wasmModule = await wasmModuleLoader();
    wasmModule.type = "sync";
    const ffi = new QuickJSFFI(wasmModule);
    return new QuickJSWASMModule(wasmModule, ffi);
}
exports.newQuickJSWASMModule = newQuickJSWASMModule;
async function newQuickJSAsyncWASMModule(
variant = exports.RELEASE_ASYNC) {
    const [wasmModuleLoader, QuickJSAsyncFFI, { QuickJSAsyncWASMModule }] = await Promise.all([
        variant.importModuleLoader(),
        variant.importFFI(),
        Promise.resolve().then(() => __importStar(require("./module-asyncify.js"))).then(esmHelpers_1.unwrapTypescript),
    ]);
    const wasmModule = await wasmModuleLoader();
    wasmModule.type = "async";
    const ffi = new QuickJSAsyncFFI(wasmModule);
    return new QuickJSAsyncWASMModule(wasmModule, ffi);
}
exports.newQuickJSAsyncWASMModule = newQuickJSAsyncWASMModule;
function memoizePromiseFactory(fn) {
    let promise;
    return () => {
        return (promise ?? (promise = fn()));
    };
}
exports.memoizePromiseFactory = memoizePromiseFactory;
exports.DEBUG_SYNC = {
    type: "sync",
    async importFFI() {
        throw new Error("not implemented");
        
        
    },
    async importModuleLoader() {
        throw new Error("not implemented");
        
        
    },
};
exports.RELEASE_SYNC = {
    type: "sync",
    async importFFI() {
        const mod = await Promise.resolve().then(() => __importStar(require("./generated/ffi.WASM_RELEASE_SYNC.js")));
        return (0, esmHelpers_1.unwrapTypescript)(mod).QuickJSFFI;
    },
    async importModuleLoader() {
        const mod = await Promise.resolve().then(() => __importStar(require("./generated/emscripten-module.WASM_RELEASE_SYNC.js")));
        return (0, esmHelpers_1.unwrapJavascript)(mod);
    },
};
exports.DEBUG_ASYNC = {
    type: "async",
    async importFFI() {
        throw new Error("not implemented");
        
        
    },
    async importModuleLoader() {
        throw new Error("not implemented");
        
        
    },
};
exports.RELEASE_ASYNC = {
    type: "async",
    async importFFI() {
        throw new Error("not implemented");
        
        
    },
    async importModuleLoader() {
        throw new Error("not implemented");
        
        
    },
};
