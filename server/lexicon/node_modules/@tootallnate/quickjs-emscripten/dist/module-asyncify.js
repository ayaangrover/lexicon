"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuickJSAsyncWASMModule = void 0;
const errors_1 = require("./errors");
const lifetime_1 = require("./lifetime");
const module_1 = require("./module");
const runtime_asyncify_1 = require("./runtime-asyncify");
class QuickJSAsyncWASMModule extends module_1.QuickJSWASMModule {
    newRuntime(options = {}) {
        const rt = new lifetime_1.Lifetime(this.ffi.QTS_NewRuntime(), undefined, (rt_ptr) => {
            this.callbacks.deleteRuntime(rt_ptr);
            this.ffi.QTS_FreeRuntime(rt_ptr);
        });
        const runtime = new runtime_asyncify_1.QuickJSAsyncRuntime({
            module: this.module,
            ffi: this.ffi,
            rt,
            callbacks: this.callbacks,
        });
        (0, module_1.applyBaseRuntimeOptions)(runtime, options);
        if (options.moduleLoader) {
            runtime.setModuleLoader(options.moduleLoader);
        }
        return runtime;
    }
    newContext(options = {}) {
        const runtime = this.newRuntime();
        const lifetimes = options.ownedLifetimes ? options.ownedLifetimes.concat([runtime]) : [runtime];
        const context = runtime.newContext({ ...options, ownedLifetimes: lifetimes });
        runtime.context = context;
        return context;
    }
    evalCodeAsync(code, options) {
        
        return lifetime_1.Scope.withScopeAsync(async (scope) => {
            const vm = scope.manage(this.newContext());
            (0, module_1.applyModuleEvalRuntimeOptions)(vm.runtime, options);
            const result = await vm.evalCodeAsync(code, "eval.js");
            if (options.memoryLimitBytes !== undefined) {
                
                vm.runtime.setMemoryLimit(-1);
            }
            if (result.error) {
                const error = vm.dump(scope.manage(result.error));
                throw error;
            }
            const value = vm.dump(scope.manage(result.value));
            return value;
        });
    }
}
exports.QuickJSAsyncWASMModule = QuickJSAsyncWASMModule;
