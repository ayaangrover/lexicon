"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuickJSRuntime = void 0;
const asyncify_helpers_1 = require("./asyncify-helpers");
const context_1 = require("./context");
const debug_1 = require("./debug");
const errors_1 = require("./errors");
const lifetime_1 = require("./lifetime");
const memory_1 = require("./memory");
const types_1 = require("./types");
class QuickJSRuntime {
        this.scope = new lifetime_1.Scope();
                        contextPointer: ctx,
                    });
                try {
                    const result = yield* awaited(moduleNormalizer(baseModuleName, moduleNameRequest, context));
                    if (typeof result === "object" && "error" in result && result.error) {
                        (0, debug_1.debugLog)("cToHostNormalizeModule: normalizer returned error", result.error);
                        throw result.error;
                    }
                    const name = typeof result === "string" ? result : result.value;
                    return context.getMemory(this.rt.value).newHeapCharPointer(name).value;
                }
                catch (error) {
                    (0, debug_1.debugLog)("normalizeModule: caught error", error);
                    context.throw(error);
                    return 0;
                }
            }),
        };
        args.ownedLifetimes?.forEach((lifetime) => this.scope.manage(lifetime));
        this.module = args.module;
        this.memory = new memory_1.ModuleMemory(this.module);
        this.ffi = args.ffi;
        this.rt = args.rt;
        this.callbacks = args.callbacks;
        this.scope.manage(this.rt);
        this.callbacks.setRuntimeCallbacks(this.rt.value, this.cToHostCallbacks);
        this.executePendingJobs = this.executePendingJobs.bind(this);
    }
    get alive() {
        return this.scope.alive;
    }
    dispose() {
        return this.scope.dispose();
    }
    newContext(options = {}) {
        if (options.intrinsics && options.intrinsics !== types_1.DefaultIntrinsics) {
            throw new Error("TODO: Custom intrinsics are not supported yet");
        }
        const ctx = new lifetime_1.Lifetime(options.contextPointer || this.ffi.QTS_NewContext(this.rt.value), undefined, (ctx_ptr) => {
            this.contextMap.delete(ctx_ptr);
            this.callbacks.deleteContext(ctx_ptr);
            this.ffi.QTS_FreeContext(ctx_ptr);
        });
        const context = new context_1.QuickJSContext({
            module: this.module,
            ctx,
            ffi: this.ffi,
            rt: this.rt,
            ownedLifetimes: options.ownedLifetimes,
            runtime: this,
            callbacks: this.callbacks,
        });
        this.contextMap.set(ctx.value, context);
        return context;
    }
    setModuleLoader(moduleLoader, moduleNormalizer) {
        this.moduleLoader = moduleLoader;
        this.moduleNormalizer = moduleNormalizer;
        this.ffi.QTS_RuntimeEnableModuleLoader(this.rt.value, this.moduleNormalizer ? 1 : 0);
    }
    removeModuleLoader() {
        this.moduleLoader = undefined;
        this.ffi.QTS_RuntimeDisableModuleLoader(this.rt.value);
    }
    
    hasPendingJob() {
        return Boolean(this.ffi.QTS_IsJobPending(this.rt.value));
    }
    setInterruptHandler(cb) {
        const prevInterruptHandler = this.interruptHandler;
        this.interruptHandler = cb;
        if (!prevInterruptHandler) {
            this.ffi.QTS_RuntimeEnableInterruptHandler(this.rt.value);
        }
    }
    removeInterruptHandler() {
        if (this.interruptHandler) {
            this.ffi.QTS_RuntimeDisableInterruptHandler(this.rt.value);
            this.interruptHandler = undefined;
        }
    }
    executePendingJobs(maxJobsToExecute = -1) {
        const ctxPtrOut = this.memory.newMutablePointerArray(1);
        const valuePtr = this.ffi.QTS_ExecutePendingJob(this.rt.value, maxJobsToExecute ?? -1, ctxPtrOut.value.ptr);
        const ctxPtr = ctxPtrOut.value.typedArray[0];
        ctxPtrOut.dispose();
        if (ctxPtr === 0) {
            
            this.ffi.QTS_FreeValuePointerRuntime(this.rt.value, valuePtr);
            return { value: 0 };
        }
        const context = this.contextMap.get(ctxPtr) ??
            this.newContext({
                contextPointer: ctxPtr,
            });
        const resultValue = context.getMemory(this.rt.value).heapValueHandle(valuePtr);
        const typeOfRet = context.typeof(resultValue);
        if (typeOfRet === "number") {
            const executedJobs = context.getNumber(resultValue);
            resultValue.dispose();
            return { value: executedJobs };
        }
        else {
            const error = Object.assign(resultValue, { context });
            return {
                error,
            };
        }
    }
    setMemoryLimit(limitBytes) {
        if (limitBytes < 0 && limitBytes !== -1) {
            throw new Error("Cannot set memory limit to negative number. To unset, pass -1");
        }
        this.ffi.QTS_RuntimeSetMemoryLimit(this.rt.value, limitBytes);
    }
    computeMemoryUsage() {
        const serviceContextMemory = this.getSystemContext().getMemory(this.rt.value);
        return serviceContextMemory.heapValueHandle(this.ffi.QTS_RuntimeComputeMemoryUsage(this.rt.value, serviceContextMemory.ctx.value));
    }
    dumpMemoryUsage() {
        return this.memory.consumeHeapCharPointer(this.ffi.QTS_RuntimeDumpMemoryUsage(this.rt.value));
    }
    setMaxStackSize(stackSize) {
        if (stackSize < 0) {
            throw new Error("Cannot set memory limit to negative number. To unset, pass 0.");
        }
        this.ffi.QTS_RuntimeSetMaxStackSize(this.rt.value, stackSize);
    }
    assertOwned(handle) {
        if (handle.owner && handle.owner.rt !== this.rt) {
            throw new errors_1.QuickJSWrongOwner(`Handle is not owned by this runtime: ${handle.owner.rt.value} != ${this.rt.value}`);
        }
    }
    getSystemContext() {
        if (!this.context) {
            
            this.context = this.scope.manage(this.newContext());
        }
        return this.context;
    }
}
exports.QuickJSRuntime = QuickJSRuntime;
