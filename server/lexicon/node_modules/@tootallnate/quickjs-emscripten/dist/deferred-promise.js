"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuickJSDeferredPromise = void 0;
class QuickJSDeferredPromise {
    constructor(args) {
        this.resolve = (value) => {
            if (!this.resolveHandle.alive) {
                return;
            }
            this.context
                .unwrapResult(this.context.callFunction(this.resolveHandle, this.context.undefined, value || this.context.undefined))
                .dispose();
            this.disposeResolvers();
            this.onSettled();
        };
        this.reject = (value) => {
            if (!this.rejectHandle.alive) {
                return;
            }
            this.context
                .unwrapResult(this.context.callFunction(this.rejectHandle, this.context.undefined, value || this.context.undefined))
                .dispose();
            this.disposeResolvers();
            this.onSettled();
        };
        this.dispose = () => {
            if (this.handle.alive) {
                this.handle.dispose();
            }
            this.disposeResolvers();
        };
        this.context = args.context;
        this.owner = args.context.runtime;
        this.handle = args.promiseHandle;
        this.settled = new Promise((resolve) => {
            this.onSettled = resolve;
        });
        this.resolveHandle = args.resolveHandle;
        this.rejectHandle = args.rejectHandle;
    }
    get alive() {
        return this.handle.alive || this.resolveHandle.alive || this.rejectHandle.alive;
    }
    disposeResolvers() {
        if (this.resolveHandle.alive) {
            this.resolveHandle.dispose();
        }
        if (this.rejectHandle.alive) {
            this.rejectHandle.dispose();
        }
    }
}
exports.QuickJSDeferredPromise = QuickJSDeferredPromise;
